import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:rada_egerton/resources/theme.dart';

class InformationCategory extends Equatable {
  final String name;
  final String id;
  const InformationCategory(this.id, this.name);
  factory InformationCategory.fromJson(json) => InformationCategory(
        json["_id"].toString(),
        json["name"],
      );
  @override
  List<Object?> get props => [
        name,
        id,
      ];
}

class InformationData extends Equatable {
  InformationMetadata metadata;
  List<InformationContent> content;
  int id;
  static String tableName_ = "InformationData";
  InformationData({
    required this.metadata,
    required this.content,
    required this.id,
  });

  factory InformationData.fromJson(Map<String, dynamic> json) {
    Iterable content = json["content"];
    List<InformationContent> informationContent = List<InformationContent>.from(
      content.map(
        (item) => InformationContent.fromJson(item),
      ),
    );
    InformationMetadata metadata =
        InformationMetadata.fromJson(json["metadata"]);
    return InformationData(
      metadata: metadata,
      content: informationContent,
      id: json["_id"] is int
          ? json["_id"]
          : int.parse(
              json["_id"],
            ),
    );
  }

  @override
  // TODO: implement props
  List<Object?> get props => [
        metadata,
        content,
        id,
      ];
}

class InformationMetadata extends Equatable {
  String title;
  String category;
  String thumbnail;
  InformationMetadata({
    required this.title,
    required this.category,
    required this.thumbnail,
  });
  factory InformationMetadata.fromJson(Map<String, dynamic> json) {
    return InformationMetadata(
      title: json["title"],
      category: json["category"].toString(),
      thumbnail: json["thumbnail"],
    );
  }

  @override
  List<Object?> get props => [
        category,
        thumbnail,
        title,
      ];
}

class InformationContent extends Equatable {
  // This content is generated by quill.js
  // check quill js delta format for prescribing  text - documentation for more details

  String bodyContent;
  String type;
  ContentAttributes attributes;
  InformationContent({
    required this.type,
    required this.bodyContent,
    required this.attributes,
  });
  factory InformationContent.fromJson(Map<String, dynamic> json) {
    return InformationContent(
      bodyContent:
          json["insert"] is String ? json["insert"] : json["insert"]["image"],
      type: json["insert"] is String
          ? InformationContent.text
          : InformationContent.image,
      attributes: json["attributes"] == null
          ? ContentAttributes()
          : ContentAttributes.fromJson(
              json["attributes"],
            ),
    );
  }

  //information type
  static String list = "0";
  static String image = "1";
  static String text = "2";
  static String title = "3";
  static String link = "4";

  @override
  // TODO: implement props
  List<Object?> get props => [
        bodyContent,
        type,
        attributes,
      ];
}

class ContentAttributes extends Equatable {
  String? align;
  bool? bold;
  bool? italic;
  String? color;
  int? header;
  String? image;
  String? list;
  String? link;
  bool? strike;
  bool? underline;
  int? indent;

  ContentAttributes(
      {this.align,
      this.bold,
      this.image,
      this.header,
      this.color,
      this.list,
      this.italic,
      this.indent,
      this.underline,
      this.strike,
      this.link});
  factory ContentAttributes.fromJson(Map<String, dynamic> json) {
    return ContentAttributes(
      align: json["align"],
      bold: json["bold"],
      list: json["list"],
      image: json["image"],
      italic: json["italic"],
      color: json["color"],
      link: json["link"],
      header: json["header"],
      strike: json["strike"],
      indent: json["intent"],
      underline: json["underline"],
    );
  }

  @override
  List<Object?> get props => [
        align,
        bold,
        italic,
        list,
        image,
        color,
        link,
        header,
        strike,
        indent,
        underline,
      ];
}

class HexColor extends Color {
  static int _getColorFromHex(String hexColor) {
    hexColor = hexColor.toUpperCase().replaceAll("#", "");
    if (hexColor.length == 6) {
      hexColor = "FF$hexColor";
    }
    return int.parse(hexColor, radix: 16);
  }

  HexColor(final String hexColor) : super(_getColorFromHex(hexColor));
}

extension X on InformationContent {
  //generate text style from attributes based on available attributes such as bold,color
  //check out quill.js delta format documetation for more details
  TextStyle get getTextStyle {
    TextStyle style = const TextStyle(
      fontSize: 14.0,
      color: Palette.lightTextColor,
    );
    if (attributes.bold == true) {
      style = style.copyWith(
        fontWeight: FontWeight.bold,
      );
    }
    if (attributes.italic == true) {
      style = style.copyWith(
        fontStyle: FontStyle.italic,
      );
    }
    if (attributes.color != null) {
      style = style.copyWith(
        color: HexColor(attributes.color!),
      );
    }

    if (attributes.header == 1) {
      style = style.copyWith(
        fontSize: 20.0,
        fontWeight: FontWeight.bold,
      );
    }
    if (attributes.header == 2) {
      style = style.copyWith(
        fontSize: 18.0,
        fontWeight: FontWeight.bold,
      );
    }

    if (attributes.strike == true) {
      style = style.copyWith(
        decoration: TextDecoration.lineThrough,
      );
    }
    if (attributes.underline == true) {
      style = style.copyWith(
        decoration: TextDecoration.underline,
      );
    }
    if (attributes.link != null) {
      style = style.copyWith(
        decoration: TextDecoration.underline,
        color: Colors.blue,
      );
    }

    return style;
  }
}
